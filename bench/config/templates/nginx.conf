{% macro server_block(bench_name, port, server_names, sites_path, ssl_certificate, ssl_certificate_key) %}

{%- set site_name = server_names[0] if (server_names|length)==1 else "$host" -%}

server {
	listen {{ port }};
	server_name
		{% for name in server_names -%}
		{{ name }}
		{% endfor -%}
		;

	root {{ sites_path }};

	{% if ssl_certificate and ssl_certificate_key %}
	ssl on;
	ssl_certificate      {{ ssl_certificate }};
	ssl_certificate_key  {{ ssl_certificate_key }};
	ssl_session_timeout  5m;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
	ssl_prefer_server_ciphers   on;
	{% endif %}

	location /assets {
		try_files $uri =404;
	}

	location ~ ^/protected/(.*) {
		internal;
		try_files /{{ site_name }}/$1 =404;
	}

	location /socket.io {
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header X-Frappe-Site-Name {{ site_name }};
		proxy_set_header Origin $scheme://$http_host;
		proxy_set_header Host $host;

		proxy_pass http://{{ bench_name }}-socketio-server;
	}

	location / {
		try_files /{{ site_name }}/public/$uri @webserver;
	}

	location @webserver {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Frappe-Site-Name {{ site_name }};
		proxy_set_header Host $host;
		proxy_set_header X-Use-X-Accel-Redirect True;
		proxy_read_timeout {{ http_timeout or 120 }};
		proxy_redirect off;

		proxy_pass  http://{{ bench_name }}-frappe;
	}

	# optimizations
	sendfile on;
	keepalive_timeout 15;
	client_max_body_size 50m;
	client_body_buffer_size 16K;
	client_header_buffer_size 1k;

	# enable gzip compresion
	# based on https://mattstauffer.co/blog/enabling-gzip-on-nginx-servers-including-laravel-forge
	gzip on;
	gzip_http_version 1.1;
	gzip_comp_level 5;
	gzip_min_length 256;
	gzip_proxied any;
	gzip_vary on;
	gzip_types
		application/atom+xml
		application/javascript
		application/json
		application/rss+xml
		application/vnd.ms-fontobject
		application/x-font-ttf
		application/font-woff
		application/x-web-app-manifest+json
		application/xhtml+xml
		application/xml
		font/opentype
		image/svg+xml
		image/x-icon
		text/css
		text/plain
		text/x-component
		;
		# text/html is always compressed by HttpGzipModule
}

{% if ssl_certificate and ssl_certificate_key %}
	# http to https redirect for {{ server_names[0] }}
	server {
	    listen 80;
		server_name {{ server_names[0] }};
	    return 301 https://$host$request_uri?$query_string;
	}

{% endif %}

{# keep the empty line above for a pleasant rendering #}
{% endmacro %}

upstream {{ bench_name }}-frappe {
    server 127.0.0.1:{{ webserver_port or 8000 }} fail_timeout=0;
}

upstream {{ bench_name}}-socketio-server {
    server 127.0.0.1:{{ socketio_port or 3000 }} fail_timeout=0;
}

{% if sites.that_use_dns -%}

	{{ server_block(bench_name, 80, sites.that_use_dns, sites_path) }}

{%- endif %}

{%- if sites.that_use_ssl -%}
	{% for site in sites.that_use_ssl -%}

		{{ server_block(bench_name, 443, [site.name], sites_path, site.ssl_certificate, site.ssl_certificate_key) }}

	{% endfor %}
{%- endif %}

{% if sites.that_use_port -%}
	{%- for site in sites.that_use_port -%}

		{{ server_block(bench_name, site.port, [site.name], sites_path) }}

	{%- endfor %}
{% endif %}
