name: CI

on:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
       include:
        - PYTHON_VER: 2.7
          TEST_ENV: "bench"
          JOB_NAME: "Python 2.7 Basic Setup"
          COMMAND: "python bench/tests/test_init.py TestBenchInit.basic"

        - PYTHON_VER: 3.6
          TEST_ENV: "bench"
          JOB_NAME: "Python 3.6 Basic Setup"
          COMMAND: "python bench/tests/test_init.py TestBenchInit.basic"

        - PYTHON_VER: 3.7
          TEST_ENV: "bench"
          JOB_NAME: "Python 3.7 Basic Setup"
          COMMAND: "python bench/tests/test_init.py TestBenchInit.basic"

        - PYTHON_VER: 3.8
          TEST_ENV: "bench"
          JOB_NAME: "Python 3.8 Production Setup"
          COMMAND: "python bench/tests/test_setup_production.py TestSetupProduction.production"

        - PYTHON_VER: 2.7
          TEST_ENV: "bench"
          JOB_NAME: "Python 2.7 Production Setup"
          COMMAND: "python bench/tests/test_setup_production.py TestSetupProduction.production"

        - PYTHON_VER: 3.6
          TEST_ENV: "bench"
          JOB_NAME: "Python 3.6 Production Setup"
          COMMAND: "python bench/tests/test_setup_production.py TestSetupProduction.production"

        - PYTHON_VER: 3.7
          TEST_ENV: "bench"
          JOB_NAME: "Python 3.7 Production Setup"
          COMMAND: "python bench/tests/test_setup_production.py TestSetupProduction.production"

        - PYTHON_VER: 3.8
          TEST_ENV: "bench"
          JOB_NAME: "Python 3.8 Production Setup"
          COMMAND: "python bench/tests/test_setup_production.py TestSetupProduction.production"

        - PYTHON_VER: 2.7
          TEST_ENV: "bench"
          JOB_NAME: "Python 2.7 Tests"
          COMMAND: "python -m unittest -v bench.tests.test_init"

        - PYTHON_VER: 3.7
          TEST_ENV: "bench"
          JOB_NAME: "Python 3.7 Tests"
          COMMAND: "python -m unittest -v bench.tests.test_init"

        - PYTHON_VER: 3.5
          TEST_ENV: "easy_install"
          JOB_NAME: "Python 3.5 Easy Install"
          COMMAND: "sudo python3.5 ${GITHUB_WORKSPACE}/install.py --user travis --run-travis --production --verbose"

        - PYTHON_VER: 3.7
          TEST_ENV: "easy_install"
          JOB_NAME: "Python 3.7 Easy Install"
          COMMAND: "sudo python3.7 ${GITHUB_WORKSPACE}/install.py --user travis --run-travis --production --verbose"

        - PYTHON_VER: 3.8
          TEST_ENV: "easy_install"
          JOB_NAME: "Python 3.8 Easy Install"
          COMMAND: "sudo python3.8 ${GITHUB_WORKSPACE}/install.py --user travis --run-travis --production --verbose"


    name: ${{ matrix.JOB_NAME }}

    services:
      mysql:
        image: mariadb:10.3
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: YES
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Clone
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.PYTHON_VER }}

      - name: Add to Hosts
        run: echo "127.0.0.1 test_site" | sudo tee -a /etc/hosts

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: bash ${GITHUB_WORKSPACE}/.github/helper/install.sh
        env:
          TEST: ${{ matrix.TEST_ENV }}

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
      
        - name: Run Tests
        run: ${{ matrix.COMMAND }}
        env:
          TEST: ${{ matrix.TEST_ENV }}

